@page
@using Presentation.Web.Pages.SalesOrders
@model Presentation.Web.Pages.SalesOrders.IndexModel

@{
    ViewData["Title"] = "Order Directory";
}

@Html.AntiForgeryToken()

<div class="container py-4">
    <div class="card shadow-lg border-0 rounded-3">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center rounded-top">
            <h1 class="mb-0"><i class="fas fa-shopping-cart me-2 fa-lg"></i>Order Directory</h1>
            <a asp-page="Create" class="btn btn-light btn-sm"><i class="fas fa-plus-circle me-1"></i>Create New</a>
        </div>
        <div class="card-body p-4 bg-light">
            <div id="loadingSpinner" class="text-center mb-3" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted mt-2">Loading orders...</p>
            </div>
            <div id="errorAlert" class="alert alert-danger d-flex align-items-center" role="alert" style="display: none;">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Error loading orders. Please try again. <button type="button" class="btn-close ms-3" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <table id="ordersTable" class="table table-striped table-hover table-bordered w-100">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Order #</th>
                        <th scope="col">Customer</th>
                        <th scope="col">Order Date</th>
                        <th scope="col">Status</th>
                        <th scope="col">Total Amount</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#ordersTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: '?handler=DataTable',
                    type: 'POST',
                    headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                    dataSrc: function (json) {
                        if (json.error) {
                            $('#errorAlert').text('Error: ' + json.error).show();
                            return [];
                        }
                        return json.data;
                    },
                    beforeSend: function () {
                        $('#loadingSpinner').show();
                        $('#errorAlert').hide();
                    },
                    complete: function () {
                        $('#loadingSpinner').hide();
                    },
                    error: function (xhr, error, thrown) {
                        console.error('DataTables Error: ' + thrown + ' - Status: ' + xhr.status + ' - Response: ' + xhr.responseText);
                        $('#errorAlert').text('Error: ' + (xhr.responseJSON?.error || thrown)).show();
                    }
                },
                columns: [
                    { data: 'orderNumber', name: 'OrderNumber', orderable: true, searchable: true },
                    { data: 'customerFullName', name: 'CustomerFullName', orderable: true, searchable: true },
                    { data: 'orderDate', name: 'OrderDate', orderable: true, searchable: true, render: function(data) { return new Date(data).toLocaleDateString(); } },
                    {
                        data: 'status', name: 'Status', orderable: true, searchable: true,
                        render: function(data) {
                            let index = parseInt(data);
                            if (isNaN(index)) {
                                const statuses = ['Placed', 'Paid', 'Shipped', 'Complete', 'Cancelled'];
                                index = statuses.indexOf(data);
                            }
                            const statusText = ['Placed', 'Paid', 'Shipped', 'Complete', 'Cancelled'][index] || 'Unknown';
                            const badgeClass = ['bg-warning text-dark', 'bg-info text-dark', 'bg-primary', 'bg-success', 'bg-danger', 'bg-secondary'][index >= 0 ? index : 5];
                            return '<span class="badge ' + badgeClass + '">' + statusText + '</span>';
                        }
                    },
                    { data: 'totalAmount', name: 'TotalAmount', orderable: true, searchable: true, render: function(data) { return '$' + parseFloat(data).toFixed(2); } },
                    {
                        data: null,
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row) {
                            return `
                                <div class="btn-group" role="group" aria-label="Actions for ${row.customerFullName}">
                                    <a href="/SalesOrders/Edit?id=${row.id}" class="btn btn-sm btn-outline-primary me-1" title="Edit" aria-label="Edit">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a href="/SalesOrders/Details?id=${row.id}" class="btn btn-sm btn-outline-info me-1" title="Details" aria-label="Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/SalesOrders/Delete?id=${row.id}" class="btn btn-sm btn-outline-danger" title="Delete" aria-label="Delete">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                </div>
                            `;
                        }
                    }
                ],
                paging: true,
                pagingType: 'full_numbers',
                searching: true,
                ordering: true,
                pageLength: 10,
                lengthMenu: [5, 10, 25, 50, 100],
                responsive: true,
                dom: '<"row"<"col-md-3"l><"col-md-6 text-center"B><"col-md-3"f>>rt<"row"<"col-md-5"i><"col-md-7"p>>',
                buttons: [
                    {
                        extend: 'excelHtml5',
                        text: '<i class="fas fa-file-excel me-1"></i>Excel',
                        className: 'btn btn-outline-success btn-sm me-1'
                    },
                    {
                        extend: 'pdfHtml5',
                        text: '<i class="fas fa-file-pdf me-1"></i>PDF',
                        className: 'btn btn-outline-danger btn-sm me-1'
                    },
                    {
                        extend: 'print',
                        text: '<i class="fas fa-print me-1"></i>Print',
                        className: 'btn btn-outline-secondary btn-sm'
                    }
                ],
                language: {
                    search: '<i class="fas fa-search me-2 text-muted"></i>',
                    searchPlaceholder: "Search by order #, customer, date, status, or amount...",
                    paginate: {
                        first: '<i class="fas fa-angle-double-left"></i>',
                        last: '<i class="fas fa-angle-double-right"></i>',
                        previous: '<i class="fas fa-angle-left"></i>',
                        next: '<i class="fas fa-angle-right"></i>'
                    },
                    lengthMenu: "Show _MENU_ entries",
                    emptyTable: "No orders found. <a href='/SalesOrders/Create' class='text-primary'>Add a new order</a>?"
                },
                initComplete: function () {
                    console.log("DataTables initialized.");
                }
            });
        });
    </script>
}