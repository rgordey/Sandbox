@page "{id:guid}"
@model Presentation.Web.Pages.Products.EditModel

@{
    ViewData["Title"] = "Edit Product";
}

<div class="container py-4">
    <div class="card shadow-sm border-0">
        <div class="card-header bg-primary text-white">
            <h1 class="mb-0"><i class="fas fa-edit me-2"></i>Edit Product</h1>
        </div>
        <div class="card-body p-4">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Command.Id" />
                <div class="form-group mb-3">
                    <label asp-for="Command.Name" class="form-label"></label>
                    <input asp-for="Command.Name" class="form-control" />
                    <span asp-validation-for="Command.Name" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Command.BasePrice" class="form-label"></label>
                    <input asp-for="Command.BasePrice" class="form-control" type="number" step="0.01" />
                    <span asp-validation-for="Command.BasePrice" class="text-danger"></span>
                </div>
                <h4 class="mb-3">Vendors</h4>
                <table id="vendorsTable" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Vendor</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.Command.Vendors.Count; i++)
                        {
                            <tr>
                                <td>
                                    <select class="form-control vendor-select" name="Command.Vendors[@i].VendorId">
                                        <option value="">Select Vendor</option>
                                        @foreach (var vendor in Model.VendorList)
                                        {
                                            @if (Model.Command.Vendors[i].VendorId == vendor.Id)
                                            {
                                                <option value="@vendor.Id" selected>@vendor.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@vendor.Id">@vendor.Name</option>
                                            }
                                        }
                                    </select>
                                </td>
                                <td><input type="number" class="form-control price-input" name="Command.Vendors[@i].VendorPrice" step="0.01" value="@Model.Command.Vendors[i].VendorPrice" /></td>
                                <td><input type="number" class="form-control stock-input" name="Command.Vendors[@i].StockQuantity" value="@Model.Command.Vendors[i].StockQuantity" /></td>
                                <td><button type="button" class="btn btn-danger" onclick="removeVendorRow(this)">Remove</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-secondary mb-3" onclick="addVendorRow()">Add Vendor</button>
                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary me-2"><i class="fas fa-save me-1"></i>Save</button>
                    <a asp-page="Index" class="btn btn-secondary"><i class="fas fa-arrow-left me-1"></i>Back to List</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        var vendorList = @Html.Raw(Json.Serialize(Model.VendorList)); // Vendor list for dropdown
        var rowCount = @Model.Command.Vendors.Count; // Initial row count

        function addVendorRow() {
            var index = rowCount++;
            var row = `<tr>
                <td><select class="form-control vendor-select" name="Command.Vendors[${index}].VendorId">
                    <option value="">Select Vendor</option>
                    ${vendorList.map(v => `<option value="${v.id}">${v.name}</option>`).join('')}
                </select></td>
                <td><input type="number" class="form-control price-input" name="Command.Vendors[${index}].VendorPrice" step="0.01" /></td>
                <td><input type="number" class="form-control stock-input" name="Command.Vendors[${index}].StockQuantity" /></td>
                <td><button type="button" class="btn btn-danger" onclick="removeVendorRow(this)">Remove</button></td>
            </tr>`;
            $('#vendorsTable tbody').append(row);
        }

        function removeVendorRow(button) {
            $(button).closest('tr').remove();
            reindexVendorRows();
        }

        function reindexVendorRows() {
            rowCount = 0;
            $('#vendorsTable tbody tr').each(function (index) {
                $(this).find('.vendor-select').attr('name', 'Command.Vendors[' + index + '].VendorId');
                $(this).find('.price-input').attr('name', 'Command.Vendors[' + index + '].VendorPrice');
                $(this).find('.stock-input').attr('name', 'Command.Vendors[' + index + '].StockQuantity');
                rowCount++;
            });
        }

        $(document).ready(function () {
            reindexVendorRows(); // Ensure initial rows are correctly indexed
        });
    </script>
}