@page
@using Application
@model Presentation.Web.Pages.PurchaseOrders.CreateModel
@{
    ViewData["Title"] = "Create Purchase Order";
    var lastUpdated = DateTime.Now.ToString("MMMM dd, yyyy hh:mm tt CDT"); // e.g., "July 22, 2025 05:54 AM CDT"
    var today = DateTime.Now.ToString("yyyy-MM-dd");
}

<div class="container py-4">
    <div class="card shadow-sm border-0">
        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
            <h1 class="card-title mb-0"><i class="fas fa-plus me-2"></i>Create Purchase Order</h1>
            <small class="text-muted">Last Updated: @lastUpdated</small>
        </div>
        <div class="card-body p-4">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="PurchaseOrder.VendorId" class="form-label">Vendor</label>
                        <select asp-for="PurchaseOrder.VendorId" class="form-select" onchange="updateProductDropdown(this)">
                            <option value="">Select a vendor</option>
                            @foreach (var vendor in Model.Vendors)
                            {
                                <option value="@vendor.Id">@vendor.Name (@vendor.ContactEmail)</option>
                            }
                        </select>
                        <span asp-validation-for="PurchaseOrder.VendorId" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="PurchaseOrder.OrderDate" class="form-label">Order Date</label>
                        <input asp-for="PurchaseOrder.OrderDate" class="form-control" type="date" value="@today"/>
                        <span asp-validation-for="PurchaseOrder.OrderDate" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="PurchaseOrder.TotalAmount" class="form-label">Total Amount</label>
                        <input asp-for="PurchaseOrder.TotalAmount" class="form-control" id="totalAmountInput" readonly />
                        <span asp-validation-for="PurchaseOrder.TotalAmount" class="text-danger"></span>
                    </div>
                </div>

                <h5 class="mb-3"><i class="fas fa-list me-2"></i>Order Details</h5>
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" id="orderDetailsTable">
                        <thead class="bg-primary text-white">
                            <tr>
                                <th>Product</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th>Line Total</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="orderDetailsBody"></tbody>
                    </table>
                    <button type="button" class="btn btn-primary btn-sm" id="addItemButton" onclick="addOrderDetailRow()">
                        <i class="fas fa-plus me-2"></i>Add Item
                    </button>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a asp-page="./Index" class="btn btn-secondary"><i class="fas fa-arrow-left me-2"></i>Back to List</a>
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save me-2"></i>Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    #orderDetailsTable {
        border: 1px solid #e5e5e5;
        box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
    }

        #orderDetailsTable .bg-primary {
            background-color: #1b6ec2 !important;
            border-color: #1861ac;
        }

        #orderDetailsTable .form-control, #orderDetailsTable .form-select {
            border-color: #e5e5e5;
        }

            #orderDetailsTable .form-control:focus, #orderDetailsTable .form-select:focus {
                border-color: #0077cc;
                box-shadow: 0 0 0 0.2rem rgba(27, 110, 194, 0.25);
            }

        #orderDetailsTable .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

            #orderDetailsTable .btn-danger:hover {
                background-color: #c82333;
                border-color: #bd2130;
            }

    .line-total, .unit-price {
        background-color: #f8f9fa;
    }
</style>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/lib/jquery/jquery.min.js" asp-append-version="true"></script>
    <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js" asp-append-version="true"></script>
    <!-- Removed DataTables scripts and initialization to prevent interference with form submission -->
    <script>
        const products = @Html.Raw(Json.Serialize(ViewData["Products"] ?? new List<ProductDto>()));
        const productVendors = @Html.Raw(Json.Serialize(ViewData["ProductVendors"] ?? new List<ProductVendorDto>()));
        console.log('Products:', products);
        console.log('ProductVendors:', productVendors);

        function addOrderDetailRow() {
            const rowCount = $('#orderDetailsBody tr').length;
            const vendorId = $('#PurchaseOrder_VendorId').val();
            console.log('Selected Vendor ID:', vendorId);
            const availableProducts = vendorId ?
                productVendors.filter(pv => pv.vendorId === vendorId).map(pv => products.find(p => p.id === pv.productId)).filter(p => p) :
                products;

            console.log('Available Products:', availableProducts);

            if (vendorId && availableProducts.length === 0) {
                alert('No products available for the selected vendor.');
                return;
            }

            const rowHtml = `
                <tr>
                    <td>
                        <input type="hidden" name="PurchaseOrder.OrderDetails[${rowCount}].Id" value="00000000-0000-0000-0000-000000000000" />
                        <select name="PurchaseOrder.OrderDetails[${rowCount}].ProductId" class="form-select product-select" onchange="updateUnitPrice(this)">
                            <option value="">Select a product</option>
                            ${availableProducts.map(p => `<option value="${p.id}" data-price="${p.basePrice}">${p.name}</option>`).join('')}
                        </select>
                    </td>
                    <td>
                        <input type="number" name="PurchaseOrder.OrderDetails[${rowCount}].Quantity" class="form-control quantity" min="1" value="1" onchange="updateLineTotal(this)" />
                    </td>
                    <td>
                        <input type="number" name="PurchaseOrder.OrderDetails[${rowCount}].UnitPrice" class="form-control unit-price" step="0.01" readonly />
                    </td>
                    <td>
                        <input type="number" class="form-control line-total" readonly />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeRow(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
            $('#orderDetailsBody').append(rowHtml);
            updateUnitPrice($(`#orderDetailsBody tr:eq(${rowCount}) .product-select`)[0]); // Set initial unit price
            updateTotalAmount(); // Update total after adding row
        }

        function updateUnitPrice(select) {
            const $row = $(select).closest('tr');
            const selectedOption = select.options[select.selectedIndex];
            const unitPrice = selectedOption ? parseFloat(selectedOption.dataset.price) || 0 : 0;
            $row.find('.unit-price').val(unitPrice.toFixed(2));
            updateLineTotal($row.find('.quantity')[0]);
            console.log('Unit Price Updated:', unitPrice.toFixed(2));
        }

        function updateLineTotal(quantityInput) {
            const $row = $(quantityInput).closest('tr');
            const quantity = parseInt(quantityInput.value) || 0;
            const unitPrice = parseFloat($row.find('.unit-price').val()) || 0;
            const lineTotal = (quantity * unitPrice).toFixed(2);
            $row.find('.line-total').val(lineTotal);
            updateTotalAmount();
            console.log('Line Total Updated:', lineTotal, 'Total Amount:', $('#totalAmountInput').val());
        }

        function updateTotalAmount() {
            let total = 0;
            $('#orderDetailsBody .line-total').each(function() {
                const value = parseFloat($(this).val()) || 0;
                total += value;
                console.log('Adding Line Total:', value, 'Running Total:', total);
            });
            const $totalInput = $('#totalAmountInput');
            if ($totalInput.length) {
                $totalInput.val(total.toFixed(2));
                console.log('Total Amount Set to:', total.toFixed(2));
            } else {
                console.error('Total Amount input not found in DOM');
            }
        }

        function removeRow(button) {
            $(button).closest('tr').remove();
            $('#orderDetailsBody tr').each(function(index) {
                $(this).find('input[type="hidden"]').attr('name', `PurchaseOrder.OrderDetails[${index}].Id`);
                $(this).find('.product-select').attr('name', `PurchaseOrder.OrderDetails[${index}].ProductId`);
                $(this).find('.quantity').attr('name', `PurchaseOrder.OrderDetails[${index}].Quantity`);
                $(this).find('.unit-price').attr('name', `PurchaseOrder.OrderDetails[${index}].UnitPrice`);
            });
            updateTotalAmount();
        }

        function updateProductDropdown(vendorSelect) {
            const vendorId = $(vendorSelect).val();
            console.log('Updating dropdown for vendorId:', vendorId);
            const $productSelects = $('#orderDetailsBody .product-select');
            const availableProducts = vendorId ?
                productVendors.filter(pv => pv.vendorId === vendorId).map(pv => products.find(p => p.id === pv.productId)).filter(p => p) :
                products;

            console.log('Filtered ProductVendors:', productVendors.filter(pv => pv.vendorId === vendorId));
            console.log('Available Products:', availableProducts);

            if (vendorId && availableProducts.length === 0) {
                alert('No products available for the selected vendor.');
                $productSelects.html('<option value="">Select a product</option>');
                $('#orderDetailsBody tr').remove();
                updateTotalAmount(); // Reset total
                $('#addItemButton').prop('disabled', true);
                return;
            }

            $productSelects.each(function() {
                const currentValue = $(this).val();
                $(this).html('<option value="">Select a product</option>' +
                    availableProducts.map(p => `<option value="${p.id}" data-price="${p.basePrice}" ${p.id === currentValue ? 'selected' : ''}>${p.name}</option>`).join(''));
                updateUnitPrice(this);
            });
            $('#addItemButton').prop('disabled', false);
            updateTotalAmount(); // Update total after dropdown change
        }

        $(document).ready(function() {
            // Removed DataTable initialization to fix form submission issues
            if ($('#PurchaseOrder_VendorId').val()) {
                updateProductDropdown($('#PurchaseOrder_VendorId')[0]);
            }
            addOrderDetailRow(); // Add initial row and update total
        });
    </script>
}